import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import requests
from luhn import verify
import stripe
import pycountry
import logging
import time
from datetime import datetime
import os

# C·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
STRIPE_API_KEY = os.getenv("STRIPE_API_KEY")
PROXY = os.getenv("PROXY", "")
CAPTCHA_API_KEY = os.getenv("CAPTCHA_API_KEY", "")

# Thi·∫øt l·∫≠p proxy
proxies = {"http": PROXY, "https": PROXY} if PROXY else {}

# Thi·∫øt l·∫≠p Stripe
stripe.api_key = STRIPE_API_KEY

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    filename="bot_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger()

# H√†m ki·ªÉm tra lo·∫°i th·∫ª qua BIN
def get_card_type(card_number):
    bin = card_number[:6]
    try:
        response = requests.get(f"https://lookup.binlist.net/{bin}", proxies=proxies, timeout=5)
        response.raise_for_status()
        data = response.json()
        brand = data.get("brand", "Unknown")
        country = pycountry.countries.get(alpha_2=data.get("country", {}).get("alpha2", ""))
        country_name = country.name if country else "Unknown"
        logger.info(f"Card BIN {bin}: Brand={brand}, Country={country_name}")
        return brand, country_name
    except requests.RequestException as e:
        logger.error(f"Error fetching BIN {bin}: {str(e)}")
        return "Unknown", "Unknown"

# H√†m ki·ªÉm tra t√≠nh h·ª£p l·ªá th·∫ª (Luhn Algorithm)
def is_valid_card(card_number):
    try:
        valid = verify(card_number.replace(" ", ""))
        logger.info(f"Card {card_number[:4]}****: Luhn check={'Valid' if valid else 'Invalid'}")
        return valid
    except Exception as e:
        logger.error(f"Error validating card {card_number[:4]}****: {str(e)}")
        return False

# H√†m gi·∫£ l·∫≠p ki·ªÉm tra s·ªë d∆∞ (Stripe test mode)
def check_balance(card_number, exp_month, exp_year, cvv):
    try:
        token = stripe.Token.create(
            card={
                "number": card_number,
                "exp_month": exp_month,
                "exp_year": exp_year,
                "cvc": cvv
            }
        )
        charge = stripe.Charge.create(
            amount=100,  # 1 USD
            currency="usd",
            source=token.id,
            description="Test charge"
        )
        logger.info(f"Card {card_number[:4]}****: Test charge successful")
        return "Valid card. Test charge successful. (Balance check not available in test mode)"
    except stripe.error.CardError as e:
        logger.error(f"Card {card_number[:4]}**** declined: {e.user_message}")
        return f"Card declined: {e.user_message}"
    except Exception as e:
        logger.error(f"Error charging card {card_number[:4]}****: {str(e)}")
        return f"Error: {str(e)}"

# H√†m x·ª≠ l√Ω CAPTCHA (2Captcha)
def solve_captcha(site_key, url):
    if not CAPTCHA_API_KEY:
        return None
    try:
        response = requests.post(
            "http://2captcha.com/in.php",
            data={
                "key": CAPTCHA_API_KEY,
                "method": "userrecaptcha",
                "googlekey": site_key,
                "pageurl": url
            },
            proxies=proxies,
            timeout=10
        )
        captcha_id = response.text.split("|")[1]
        for _ in range(10):
            result = requests.get(
                f"http://2captcha.com/res.php?key={CAPTCHA_API_KEY}&action=get&id={captcha_id}",
                proxies=proxies,
                timeout=10
            )
            if "CAPCHA_NOT_READY" not in result.text:
                captcha_solution = result.text.split("|")[1]
                logger.info(f"CAPTCHA solved for {url}: {captcha_solution}")
                return captcha_solution
            time.sleep(5)
        logger.warning(f"CAPTCHA timeout for {url}")
        return None
    except Exception as e:
        logger.error(f"Error solving CAPTCHA for {url}: {str(e)}")
        return None

# H√†m x·ª≠ l√Ω l·ªánh /start
def start(update, context):
    user = update.message.from_user
    logger.info(f"User {user.id} ({user.username}) started bot")
    update.message.reply_text(
        "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Ki·ªÉm Tra Th·∫ª (Test Mode)!\n\n"
        "üìã G·ª≠i th√¥ng tin th·∫ª theo ƒë·ªãnh d·∫°ng:\n"
        "S·ªë th·∫ª | Th√°ng h·∫øt h·∫°n | NƒÉm h·∫øt h·∫°n | CVV\n"
        "V√≠ d·ª•: 4242424242424242 | 12 | 2025 | 123\n\n"
        "‚ö†Ô∏è Ch·ªâ s·ª≠ d·ª•ng th·∫ª test (nh∆∞ Stripe test cards) ƒë·ªÉ tr√°nh r·ªßi ro ph√°p l√Ω.\n"
        "G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt."
    )

# H√†m x·ª≠ l√Ω l·ªánh /help
def help_command(update, context):
    user = update.message.from_user
    logger.info(f"User {user.id} ({user.username}) requested help")
    update.message.reply_text(
        "üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot:\n\n"
        "1Ô∏è‚É£ G·ª≠i th√¥ng tin th·∫ª theo ƒë·ªãnh d·∫°ng:\n"
        "   S·ªë th·∫ª | Th√°ng h·∫øt h·∫°n | NƒÉm h·∫øt h·∫°n | CVV\n"
        "   V√≠ d·ª•: 4242424242424242 | 12 | 2025 | 123\n\n"
        "2Ô∏è‚É£ Bot s·∫Ω tr·∫£ v·ªÅ:\n"
        "   - Lo·∫°i th·∫ª (Visa, MasterCard, v.v.)\n"
        "   - Qu·ªëc gia ph√°t h√†nh\n"
        "   - Tr·∫°ng th√°i th·∫ª (h·ª£p l·ªá hay kh√¥ng)\n\n"
        "3Ô∏è‚É£ Th·∫ª test Stripe:\n"
        "   - Visa: 4242424242424242\n"
        "   - MasterCard: 5555555555554444\n"
        "   - Amex: 378282246310005\n"
        "   CVV b·∫•t k·ª≥, th√°ng/nƒÉm h·∫øt h·∫°n sau ng√†y hi·ªán t·∫°i.\n\n"
        "üìß Li√™n h·ªá h·ªó tr·ª£: @YourSupportChannel"
    )

# H√†m x·ª≠ l√Ω th√¥ng tin th·∫ª
def handle_card(update, context):
    user = update.message.from_user
    text = update.message.text
    logger.info(f"User {user.id} ({user.username}) sent: {text}")

    try:
        card_number, exp_month, exp_year, cvv = text.split("|")
        card_number = card_number.strip()
        exp_month = int(exp_month.strip())
        exp_year = int(exp_year.strip())
        cvv = cvv.strip()

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng
        if len(card_number) < 12 or len(card_number) > 19:
            update.message.reply_text("‚ùå S·ªë th·∫ª kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 12-19 ch·ªØ s·ªë).")
            return
        if exp_month < 1 or exp_month > 12:
            update.message.reply_text("‚ùå Th√°ng h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá (1-12).")
            return
        if exp_year < datetime.now().year:
            update.message.reply_text("‚ùå NƒÉm h·∫øt h·∫°n ph·∫£i sau ng√†y hi·ªán t·∫°i.")
            return
        if len(cvv) < 3 or len(cvv) > 4:
            update.message.reply_text("‚ùå CVV kh√¥ng h·ª£p l·ªá (3-4 ch·ªØ s·ªë).")
            return

        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá th·∫ª
        if not is_valid_card(card_number):
            update.message.reply_text("‚ùå Th·∫ª kh√¥ng h·ª£p l·ªá (Luhn check failed).")
            return

        # Ki·ªÉm tra lo·∫°i th·∫ª
        card_type, country = get_card_type(card_number)
        update.message.reply_text(
            f"‚úÖ K·∫øt qu·∫£ ki·ªÉm tra:\n"
            f"‚Ä¢ Lo·∫°i th·∫ª: {card_type}\n"
            f"‚Ä¢ Qu·ªëc gia: {country}"
        )

        # Gi·∫£ l·∫≠p ki·ªÉm tra s·ªë d∆∞
        balance_result = check_balance(card_number, exp_month, exp_year, cvv)
        update.message.reply_text(f"‚Ä¢ Tr·∫°ng th√°i: {balance_result}")

    except ValueError:
        update.message.reply_text(
            "‚ùå L·ªói ƒë·ªãnh d·∫°ng. Vui l√≤ng g·ª≠i ƒë√∫ng ƒë·ªãnh d·∫°ng:\n"
            "S·ªë th·∫ª | Th√°ng h·∫øt h·∫°n | NƒÉm h·∫øt h·∫°n | CVV\n"
            "V√≠ d·ª•: 4242424242424242 | 12 | 2025 | 123"
        )
    except Exception as e:
        logger.error(f"Error processing card for user {user.id}: {str(e)}")
        update.message.reply_text(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.")

# H√†m main
def main():
    try:
        updater = Updater(TELEGRAM_TOKEN, use_context=True, request_kwargs={"proxy_url": PROXY} if PROXY else {})
        dp = updater.dispatcher

        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help_command))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_card))

        logger.info("Bot started")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"Bot failed to start: {str(e)}")
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()
